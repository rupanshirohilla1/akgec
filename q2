#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;


bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i <= sqrt(num); i++) {
        if (num % i == 0) return false;
    }
    return true;
}

// Function to arrange the array as per the problem statement
vector<int> arrangeArray(vector<int> arr) {
    vector<int> primes;
    vector<int> nonPrimes;
    
    // SEPERATION
    for (int num : arr) {
        if (isPrime(num)) {
            primes.push_back(num);
        } else {
            nonPrimes.push_back(num);
        }
    }
    
    if (primes.empty) //return array sorted in descending order
        sort(arr.rbegin(), arr.rend());
        return arr;
    }
    
    // Find the largest and smallest primes
    int largestPrime = *max_element(primes.begin(), primes.end());
    int smallestPrime = *min_element(primes.begin(), primes.end());
    
    primes.erase(remove(primes.begin(), primes.end(), largestPrime), primes.end());
    primes.erase(remove(primes.begin(), primes.end(), smallestPrime), primes.end());
    
    
    vector<int> middlePart = nonPrimes;
    middlePart.insert(middlePart.end(), primes.begin(), primes.end());
    
    
    sort(middlePart.rbegin(), middlePart.rend());
    
    // Construct the final array
    vector<int> result;
    result.push_back(largestPrime);
    result.insert(result.end(), middlePart.begin(), middlePart.end());
    result.push_back(smallestPrime);
    
    return result;
}


int main() {
    vector<int> example1 = {5, 1, 8, 11, 2};
    vector<int> example2 = {1, 6, 4, 13, 9, 3};
    
    vector<int> result1 = arrangeArray(example1);
    vector<int> result2 = arrangeArray(example2);
    
    // Print results
    cout << "Output for example1: ";
    for (int num : result1) {
        cout << num << " ";
    }
    cout << endl;

    cout << "Output for example2: ";
    for (int num : result2) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
} 
